@using ProductCatalog.Client;

@page "/"
@using Models
@inject NavigationManager NavigationManager

<!-- Page Title -->
<PageTitle>Product Catalog</PageTitle>

<!-- Page Heading -->
<h1 class="product-catalog">Product Catalog</h1>

<!-- Conditional rendering based on whether 'products' is loaded -->
@if (products is null)
{
    <p><em>Loading....</em></p>
}
else
{
    <!-- DeleteProduct component for deletion confirmation modal -->
    <DeleteProduct Product="@currentProduct" OnClose="@OnDeleteModalClose"></DeleteProduct>

    <!-- Product table -->
    <table class="table table-striped table-bordered table-hover">
        <thead class="table-dark">
            <!-- Table headers -->
            <th>Id</th>
            <th>Name</th>
            <th>Description</th>
            <th>Price</th>
            <th>Release Date</th>
            <th></th>
        </thead>
        <tbody>
            <!-- Loop through each product and display its details -->
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>
                        <!-- Link to display product details -->
                        <a href="/product/@product.Id">@product.Name</a>
                    </td>
                    <!-- Display other product details -->
                    <td>@product.Description</td>
                    <td>@product.Price</td>
                    <td>@product.ReleaseDate.ToString("MM/dd/yyyy")</td>
                    <td>
                        <!-- Edit and delete buttons -->
                        <button class="btn btn-primary" @onclick="(() => EditProduct(product.Id))">
                            <i class="oi oi-pencil"></i>
                        </button>
                        <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteModal"
                                @onclick="(() => currentProduct = product)">
                            <i class="oi oi-x"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Button to create a new product -->
<div class="row mb-4">
    <div class="col-sm-6">
        <button type="button" class="btn btn-primary" @onclick="CreateProduct">New Product</button>
    </div>
</div>

@code {
    private Product[]? products;
    private Product? currentProduct;

    // Fetch products when the component is initialized
    protected override void OnInitialized()
    {
        products = ProductClient.GetProducts();
    }

    // Navigate to the create product page
    private void CreateProduct()
    {
        NavigationManager.NavigateTo("/product");
    }

    // Navigate to the edit product page
    private void EditProduct(int id)
    {
        NavigationManager.NavigateTo($"/product/{id}/edit");
    }

    // Handle deletion confirmation modal close
    private void OnDeleteModalClose(bool accepted)
    {
        if (accepted)
        {
            // Delete the product and update the products list
            ProductClient.DeleteProduct(currentProduct!.Id);
            products = ProductClient.GetProducts();
        }
    }
}
